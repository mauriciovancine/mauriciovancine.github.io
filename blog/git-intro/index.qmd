---
title: Introdução ao controle de versão com git, GitHub e RStudio
subtitle: "Principais conceitos de controle de versão usando git"
author: Maurício Vancine com edições de textos do ChatGPT
date: 2025-05-01
categories: ["git", "Versionamento"]
image: "featured.jpg"
code-link: true
execute:
  eval: false
toc: true
editor: source
---

## Contextualização

Nas [disciplinas](/teaching) que ofereço, geralmente eu começo com uma parte de controle de versão usando [git](https://git-scm.com/). 
Em 2021 ofereci um [minicurso](http://localhost:4321/teaching/workshop-git/) para o pessoal da [Universidade Federal Rural de Pernambuco (UFRPE)](https://www.ufrpe.br/). 

Falando com o [Prof. Diogo Provete](http://diogoprovete.weebly.com/) sobre disciplinas e como ensinar git, chegamos à conclusão que é fundamental ter um material didático sobre esse assunto.

Este tutorial aborda os conceitos gerais de controle de versão usando o [git](https://git-scm.com/) e sua integração com o [GitHub](https://github.com/) e o [RStudio](https://posit.co/download/rstudio-desktop/).

Recomendo também olhar o minicurso [gitR: controle de versão com git, GitHub e RStudio](/teaching/workshop-git/). Este post é a transcrição do mesmo.

### 1. Conferindo os computadores

É necessário verificar se os seguintes softwares estão instalados e atualizados:

- [R](https://www.r-project.org/)
- [RStudio](https://www.rstudio.com/)
- [git](https://git-scm.com/)

Além disso, é interessante conhecer softwares que fazem o controle de versão usando uma interface:

- [gitKraken](https://www.gitkraken.com/)
- [GitHub Desktop](https://github.com/apps/desktop)

### 2. Controle de versão

O controle de versão permite manejar projetos de forma organizada e colaborativa. Por exemplo:

- Versionamento de arquivos
- Controle individual de projetos
- Controle colaborativo de projetos
- Controle de versões no tempo

O git é uma principal ferramenta utilizada em grandes projetos científicos. Além disso, seu uso é cada vez mais necessário em colaborações internacionais.

Dois manuscrito demonstram isso:

- [Perez-Riverol et al. (2016)](https://doi.org/10.1371/journal.pcbi.1004947)
- [Braga et al. (2022)](https://doi.org/10.1111/2041-210X.14108)

### 3. git e GitHub

### O que é git?

- Software para **controle de versão**.
- Gerencia **repositórios locais** e **remotos**.

Criado por **Linus Torvalds** em 2005 para o desenvolvimento do Kernel Linux, é um software livre distribuído sob a licença GNU GPL v2.

![Linus Torvalds](img/general_linus.jpg)

Fonte: [kernel.org](https://www.kernel.org/)

Vídeo introdutório sobre git:

<iframe width="80%" height="480" src="https://www.youtube.com/embed/6Czd1Yetaac" frameborder="0" allowfullscreen></iframe>

---

### O que é GitHub?

- Plataforma de hospedagem de **repositórios remotos**.
- Oferece ferramentas para controle de versão e colaboração.

Além do GitHub, há outras plataformas como:

- [GitLab](https://gitlab.com/)
- [Bitbucket](https://bitbucket.org/)

![Plataformas](img/github_logo2.png)

### Atenção aos conceitos:

- **git**: software de controle de versão.
- **GitHub**: plataforma de hospedagem de código versionado.

![Diferença entre git e GitHub](img/git_github_diff.png)

Fonte: [Is Git the Same Thing as Github!?](https://jahya.net/blog/git-vs-github/)

---

## 4. Detalhes do GitHub

### Perfil

![Perfil GitHub](img/github_profile.png)

**Seções importantes:**

- **Overview**: informações pessoais.
- **Repositories**: lista de repositórios.
- **Projects**: gerenciador visual de tarefas.
- **Packages**: bibliotecas e containers.
- **Stars**: repositórios favoritos.

---

### Configurações

Para acessar: `superior direito > foto do perfil > Settings`

![Configurações](img/github_profile_settings.png)

### Repositório

![Repositório](img/github_repository.png)

Principais abas de um repositório:

- **Code**: arquivos, histórico e README.md.
- **Issues**: reportar e gerenciar problemas.
- **Pull requests**: propostas de alterações.
- **Actions**: automação de fluxos de trabalho.
- **Projects**: gerenciador visual (Kanban).
- **Wiki**: documentação detalhada.
- **Security**: segurança do código.
- **Insights**: análises.
- **Settings**: configurações gerais.

---

### README.md

Arquivo principal de documentação, escrito em Markdown:

![README](img/github_readme.png)

- Visível na página inicial do repositório.
- Explica objetivos, estrutura e uso do projeto.

Mais sobre Markdown:  
[Markdown](https://daringfireball.net/projects/markdown/)  
[Markdown Guide](https://www.markdownguide.org/)

---

## 5. Criando um repositório

Para criar um repositório: `Perfil > Repositories > New`

![Criar repositório](img/github_criar_repositorio01.png)

Preencha:

1. Nome
2. Descrição (opcional)
3. Público ou privado
4. Adicionar README.md
5. Adicionar .gitignore
6. Licença

Clique em "Create repository".

![Configurações de criação](img/github_criar_repositorio02.png)

---

## Prática 2: Criar página inicial no GitHub

![Exemplo de README](https://www.alura.com.br/artigos/assets/como-criar-um-readme-para-seu-perfil-github/imagem1.gif)

Passos:

1. Criar um repositório com seu nome de usuário (e.g. `mauriciovancine`).
2. Criar arquivo `README.md`.
3. Preencher com conteúdo em Markdown.
4. Commitar e verificar o perfil.

Fonte: [Como criar um README para seu perfil no GitHub](https://www.alura.com.br/artigos/como-criar-um-readme-para-seu-perfil-github)

---

## 6. Configurações: RStudio, git e GitHub

### Configuração no RStudio

![RStudio](img/rstudio.png)

Acesse: `Tools > Global Options > Git/SVN`

![Configuração git no RStudio](img/rstudio_git_config01.png)

- Marque **Enable version control interface for RStudio projects**.
- Configure o caminho do **Git executable**:

  - **Windows**: `C:/Program Files/Git/bin/git.exe`
  - **Ubuntu**: `/usr/bin/git`
  - **Mac**: `/usr/bin/git` (em geral)

![](img/github_ssh_key_add.png)


---

<style>
#topBtn {
  display: none;
  position: fixed;
  bottom: 105px; /* um pouco acima do fundo */
  left: 50%;
  transform: translateX(-50%);
  padding: 10px 14px;
  font-size: 20px;
  border: none;
  border-radius: 6px;
  background-color: rgba(28, 108, 190, 0.7); /* azul com transparência */
  color: white;
  cursor: pointer;
  box-shadow: 0 2px 6px rgba(0,0,0,0.3);
  transition: background-color 0.3s;
}
#topBtn:hover {
  background-color: rgba(0, 86, 179, 0.9);
}
</style>

<button id="topBtn" onclick="window.scrollTo({top: 0, behavior: 'smooth'});">↑ Topo</button>

<script>
const btn = document.getElementById("topBtn");

window.addEventListener("scroll", () => {
  const scrollBottom = window.innerHeight + window.scrollY;
  const docHeight = document.documentElement.scrollHeight;

  if (scrollBottom >= docHeight - 200) { // aparece um pouco antes do final
    btn.style.display = "block";
  } else {
    btn.style.display = "none";
  }
});
</script>
