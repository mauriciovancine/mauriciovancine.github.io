{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Introdução à linguagem Julia\n",
        "subtitle: \"Uma breve introdução à linguagem Julia\"\n",
        "author: Maurício Vancine com edições de textos do ChatGPT\n",
        "date: \"2024-12-21\"\n",
        "categories: [\"Julia\", \"Linguagem de programação\"]\n",
        "image: \"featured.png\"\n",
        "toc: true\n",
        "draft: false\n",
        "code-link: true\n",
        "execute:\n",
        "  eval: false\n",
        "editor: source\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Contextualização\n",
        "\n",
        "Há muito tempo ouço falar, isso desde 2014 ou 2015, que a linguagem **Julia** irá desbancar as linguagens R e Python em termos de programação e que eu deveria focar meus esforços em aprendê-la. Bom, 10 anos depois, me parece que o R e o Python ainda dominam o mercado da Ciência de Dados e o mundo acadêmico, principalmente da Ecologia. \n",
        "\n",
        "Mas notei algumas tendências muito interessantes de aumento do uso da linguagem **Julia**, principalmente de alguns grupos de pesquisa da Europa, isso na área de Ecologia. Vou tentar fazer uma visão geral através de um material simples para eluciadar alguns pontos sobre essa linguagem.\n",
        "\n",
        "Numa série de três posts, começando por este, [Introdução à linguagem Julia](https://mauriciovancine.github.io/blog/2024-12-julia-intro), seguido por [Usando Julia na Ecologia](https://mauriciovancine.github.io/blog/2025-01-julia-eco) e por fim [Usando Julia para dados geoespaciais](https://mauriciovancine.github.io/blog/2025-02-julia-geospat), vou detalhar um pouco das principais características e aplicações da linguagem **Julia** para a Ecologia e para as análises geoespaciais.\n",
        "\n",
        "## Desenvolvimento\n",
        "\n",
        "### O que é?\n",
        "\n",
        "[Julia](https://julialang.org) é uma linguagem de programação livre e de código aberto e de alto desempenho, criada para atender a necessidades de computação numérica e científica, com foco na combinação de facilidade de uso e velocidade. \n",
        "\n",
        "### Criação\n",
        "\n",
        "A criação da linguagem **Julia** começou em 2009, quando Jeff Bezanson, Stefan Karpinski, Viral B. Shah e Alan Edelman do **MIT** (Massachusetts Institute of Technology) decidiram preecher uma lacuna significativa nas ferramentas de programação existentes para computação científica e numérica. \n",
        "\n",
        "Linguagens como MATLAB e Python eram frequentemente criticadas por sua lentidão quando lidavam com tarefas de grande escala, enquanto C e Fortran ofereciam alto desempenho, mas eram mais difíceis de usar, especialmente para pessoas que não tinham experiência com programação de baixo nível. **Julia** foi projetada para preencher essa lacuna, oferecendo o melhor dos dois mundos: desempenho de baixo nível com a facilidade de linguagens de alto nível. \n",
        "\n",
        "Em 2012, Karpinski explicou por que do nome **Julia**: \"Na verdade não há uma boa razão, parecia um nome bonito.\". Já Jeff Bezanson disse que escolheu o nome por sugestão de um amigo. Para ler mais, consulte: [Why We Created Julia](https://julialang.org/blog/2012/02/why-we-created-julia/).\n",
        "\n",
        "### Objetivos\n",
        "\n",
        "O objetivo principal era criar uma linguagem que fosse rápida para tarefas numéricas pesadas, mas que também fosse fácil de aprender e usar. Os fundadores queriam também que **Julia** fosse flexível e modular, permitindo que os usuários pudessem combinar diferentes paradigmas de programação e integrar facilmente bibliotecas de outras linguagens, como Python, R e C.\n",
        "\n",
        "Essa linguagem é particularmente indicada para tarefas intensivas em cálculos, como análise de dados, modelagem matemática, simulações científicas e aprendizado de máquina, sendo uma escolha popular entre cientistas, engenheiros e pesquisadores.\n",
        "\n",
        "Além disso, a linguagem foi projetada para ser aberta e colaborativa, permitindo que qualquer pessoa pudesse contribuir com seu desenvolvimento. A filosofia era criar uma linguagem capaz de aproveitar o potencial de cálculos paralelos e de alta performance, ao mesmo tempo em que mantinha uma sintaxe clara e simples, acessível tanto para programadores novatos quanto experientes.\n",
        "\n",
        "### Estrutura técnica\n",
        "\n",
        "O grande desafio enfrentado pela equipe de desenvolvimento da linguagem **Julia** foi criar uma linguagem que fosse capaz de atingir alto desempenho sem sacrificar a simplicidade de uso. Para alcançar isso, a linguagem adotou o uso de **compilação Just-in-Time (JIT)** utilizando o framework **LLVM** (*Low-Level Virtual Machine*).  Isso permitiu que o código **Julia** fosse compilado em tempo de execução, aproveitando otimizações específicas para o hardware do computador, resultando em desempenho de nível da linguagem C, sem a necessidade de se escrever código de baixo nível.\n",
        "\n",
        "A compilação **Just-in-Time (JIT)** é como se **Julia** fosse um tradutor que transforma o código que você escreve em algo que o computador consegue entender rapidamente, mas só faz isso no momento em que você pede para executar o código. Em vez de traduzir tudo antes (como nas linguagens tradicionais compiladas, como C) ou traduzir aos poucos enquanto o código roda (como em linguagens interpretadas, como Python), o JIT faz isso *\"na hora certa\"* para garantir velocidade e eficiência.\n",
        "\n",
        "Julia usa o **LLVM** (*Low-Level Virtual Machine*) como uma \"máquina tradutora superinteligente\". O LLVM é um sistema poderoso que ajuda Julia a transformar seu código em instruções que o computador pode executar quase tão rápido quanto programas feitos em linguagens de baixo nível, como C. Isso significa que o código em Julia é rápido, mas você não precisa se preocupar com os detalhes complicados que tornam linguagens como C mais difíceis de usar.\n",
        "\n",
        "De forma simples, o JIT da **Julia** pega seu código, traduz para algo que o computador entende, e faz isso muito rápido e de maneira inteligente, usando o LLVM. Por isso, **Julia** consegue unir a facilidade de linguagens como Python com a velocidade de linguagens como C.\n",
        "\n",
        "Outra inovação foi o uso de **tipagem dinâmica** junto com um sistema de **tipagem múltipla**. A tipagem dinâmica significa que você não precisa dizer ao computador qual tipo de dado (número, texto, lista, etc.) está usando, **Julia** descobre isso sozinha enquanto executa seu código. Agora, o sistema de tipagem múltipla é como **Julia** organiza e utiliza os tipos de dados de forma inteligente, permitindo que você escreva funções que funcionam com diferentes tipos de entrada, mas que Julia ainda consiga otimizar o desempenho.\n",
        "\n",
        "Em resumo, tipagem dinâmica facilita o uso da linguagem, enquanto a tipagem múltipla permite que **Julia** seja eficiente e flexível, escolhendo automaticamente as melhores operações para os tipos dos dados que você fornece.\n",
        "\n",
        "A linguagem também se destaca em termos de paralelismo e concorrência, com suporte nativo para computação paralela e distribuída. Isso torna o **Julia** altamente eficiente para grandes volumes de dados e cálculos complexos, sendo capaz de lidar com múltiplos núcleos e distribuindo tarefas de forma eficaz. No Julia, **concorrência** permite executar várias tarefas assíncronas simultaneamente, como operações de I/O, usando `@async`. Já o **paralelismo** utiliza múltiplos núcleos de CPU para processar tarefas em paralelo, seja com threads (`Threads.@spawn`) ou processos separados (`Distributed`).\n",
        "\n",
        "A integração com outras linguagens é outro ponto forte do **Julia**, permitindo que bibliotecas e código em Python, R, C, Fortran, entre outras, sejam chamados diretamente, o que facilita a reutilização de código existente e amplia a flexibilidade do ambiente de desenvolvimento.\n",
        "\n",
        "### Instalação\n",
        "\n",
        "A instalação da linguagem **Julia** é simples e direta. Eu achei muito prático acessar o site oficial [https://julialang.org/](https://julialang.org), depois clicar em *Download*, copiar o código que eles fornecem e colar no terminal Linux ou MacOS.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "``` {julia}\n",
        "#| eval: false\n",
        "curl -fsSL https://install.julialang.org | sh\n",
        "```"
      ],
      "id": "d8ea7ce3"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}